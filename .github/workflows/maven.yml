name: Build and Deploy TeaTeach

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: kalenitid618
          MYSQL_DATABASE: teateach
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h127.0.0.1 -uroot -pkalenitid618 --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Initialize MySQL schema
        run: |
          mysql -h127.0.0.1 -uroot -pkalenitid618 teateach < ./src/test/java/resources/schema.sql

      - name: Build and run tests with Maven
        run: mvn clean test --file pom.xml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && false
    
    steps:
      - uses: actions/checkout@v4

      # Copy only deployment scripts to server
      - name: Copy deployment files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 36.212.128.238
          username: root
          password: Chuchuang0304)#)$@.com
          source: "deploy/*"
          target: "/tmp/"
          strip_components: 1

      - name: Deploy on Remote Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 36.212.128.238
          username: root
          password: Chuchuang0304)#)$@.com
          script: |
            # Make setup script executable and run it (first time only)
            chmod +x /tmp/setup-server.sh
            if [ ! -d "/opt/teateach" ]; then
              /tmp/setup-server.sh
            fi
            
            # Stop existing backend service
            sudo systemctl stop teateach-backend || true
            
            # Clone or update repository
            if [ -d "/opt/teateach/source" ]; then
              echo "Updating existing repository..."
              cd /opt/teateach/source
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            else
              echo "Cloning repository..."
              sudo mkdir -p /opt/teateach/source
              sudo chown neu:neu /opt/teateach/source
              git clone https://github.com/${{ github.repository }}.git /opt/teateach/source
              cd /opt/teateach/source
            fi
            
            # Build Spring Boot Backend
            echo "Building Spring Boot backend..."
            ./mvnw clean package -DskipTests
            
            # Copy JAR to backend directory
            cp target/*.jar /opt/teateach/backend/
            
            # Build Vue Frontend
            echo "Building Vue frontend..."
            cd web
            npm ci
            npm run build
            
            # Copy frontend build to frontend directory
            rm -rf /opt/teateach/frontend/*
            cp -r dist/* /opt/teateach/frontend/

      - name: Start Services on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 36.212.128.238
          username: root
          password: Chuchuang0304)#)$@.com
          script: |
            # Set proper permissions
            chown -R root:root /opt/teateach
            
            # Start backend service
            systemctl daemon-reload
            systemctl start teateach-backend
            systemctl enable teateach-backend
            
            # Restart nginx to ensure it's running with latest config
            systemctl restart nginx
            
            # Wait for services to start
            sleep 15
            
            # Check service status
            echo "=== Backend Service Status ==="
            systemctl status teateach-backend --no-pager || true
            
            echo "=== Nginx Service Status ==="
            systemctl status nginx --no-pager || true
            
            echo "=== Backend Health Check ==="
            for i in {1..5}; do
              if curl -f http://localhost:8080/actuator/health; then
                echo "Backend is healthy!"
                break
              else
                echo "Attempt $i: Backend not ready yet, waiting..."
                sleep 5
              fi
            done
            
            echo "=== Frontend Check ==="
            curl -I http://localhost/ || echo "Frontend check failed"
            
            echo "=== Deployment Summary ==="
            echo "Backend URL: http://36.212.128.238:8080"
            echo "Frontend URL: http://36.212.128.238"
            echo "API URL: http://36.212.128.238/api"
            echo "Health Check: http://36.212.128.238/health"
            echo "Deployment completed successfully!"
